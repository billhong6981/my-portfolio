import React, { useRef, useEffect } from 'react'

const Canvas = props => {
  
  const canvasRef = useRef(null)
  
  const draw = (ctx, frameCount) => {
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)
    ctx.fillStyle = '#000000'
    ctx.beginPath()
    ctx.arc(50, 100, 20*Math.sin(frameCount*0.05)**2, 0, 2*Math.PI)
    ctx.fill()
  }
  
  useEffect(() => {
    
    const canvas = canvasRef.current
    const context = canvas.getContext('2d')
    let frameCount = 0
    let animationFrameId
    
    //Our draw came here
    const render = () => {
      frameCount++
      draw(context, frameCount)
      animationFrameId = window.requestAnimationFrame(render)
    }
    render()
    
    return () => {
      window.cancelAnimationFrame(animationFrameId)
    }
  }, [draw])
  
  return <canvas ref={canvasRef} {...props}/>
}

export default Canvas
/**
var canvas = document.getElementById("myCanvas");
//var video = document.querySelector('video');
var ctx = canvas.getContext("2d");
var ballRadius = 5;
var x = canvas.width / 2;
var y = canvas.height - 30;
var dx = 1;
var dy = -1;

const drawBall = () => {
    this.ctx.beginPath();
    this.ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
    this.ctx.fillStyle = "#0095DD";
    this.ctx.fill();
    this.ctx.closePath();
}

const draw = () => {
    this.ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBall();
  
    if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
      dx = -dx;
    }
    if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) {
      dy = -dy;
    }
  
    x += dx;
    y += dy;
}

const BouncingBall = () => {
    return (
    <>
        <canvas
            id="myCanvas"
            width="150"
            height="150"
        >
            {setInterval(this.draw, 30)}
        </canvas>
    </>
    )
}

export default BouncingBall;
*/
